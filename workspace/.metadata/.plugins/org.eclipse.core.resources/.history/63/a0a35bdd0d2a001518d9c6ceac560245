package ba.bitcamp.homework21;

public class LinkedListDouble {

	private Node start;
	
	public LinkedListDouble(){
		this.start = null;
	}
	
	public LinkedListDouble(LinkedListDouble other){
		this.start = other.start;
	}
	
	public void add(double number) {
		if (start == null) {
			start = new Node(number);
		} else {
			Node last = getLastNode();
			last.setNext(new Node(number));
		}
	}

	public Node getLastNode() {
		Node temp = start;
		while (temp.getNext() != null) {
			temp = temp.getNext();
		}
		return temp;
	}

	public void remove(int index) {

		if (index == 0) {
			start = start.getNext();
		} else {
			Node temp = start;

			for (int i = 0; i < index; i++) {
				temp = temp.getNext();
			}

			Node previous = getPreviousNode(temp);

			previous.setNext(temp.getNext());
		}
	}

	public void addFront(double number) {
		if (start == null) {
			start = new Node(number);
		}
		Node first = new Node(number);
		first.setNext(start.getNext());
		start = first;
	}
	
	public void deleteFirst(){
		if(start == null){
			
		}else{
			
		}
	}

	public void deleteLast() {
		Node temp = start;
		while (temp.getNext() != null) {
			temp = temp.getNext();
		}
		Node previous = getPreviousNode(temp);
		previous.setNext(null);
	}

	public Node getPreviousNode(Node n) {
		if (n == start) {
			return null;
		}

		Node temp = start;
		while (temp.getNext() != n) {
			temp = temp.getNext();
		}

		return temp;
	}
	
	@Override
	public String toString() {
		return String.format("%s", start);
	}

	private class Node {
		private double number;
		private Node next;

		public Node(double number) {
			this.number = number;
		}

		public double getNumber() {
			return number;
		}

		public Node getNext() {
			return next;
		}

		public void setNumber(double number) {
			this.number = number;
		}

		public void setNext(Node next) {
			this.next = next;
		}

		@Override
		public String toString() {
			return String.format("%s, %s", number, next);
		}

	}
}
